test('function', () => {

  function solution(n,m) {
    let dp = [];
    
    for (let i = 0; i < 30; i++) {
      dp[i][i] = 1;
      dp[i][0] = 1;
    }

    for (let i = 2; i < 30; i++) {
      for (let j =1; j < 30; j++) {
        dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]; 
      }
    }


    return dp[M][N];
  }

});

// 1 <= N <= M <= 29
// 연결을 어떻게 구현?
// n=5, m=6일때
// n1에서 간다고 선택했을 때 -> M[1]이 될 수 있는 것은 m1 ~ m5까지
// M[1]에 할당 // (1,n2에서 간다 선택했을 때 나올수있는 M중에 한개)

// n2에서 간다고 선택했을 때 -> M[2]가 될 수 있는 것은 m1 ~ m5 exept M[1] (temp[All])
// M[2]에 할당 // 2
// n3에서 간다고 선택했을 때 -> M[3]가 될 수 있는 것은 m1 ~ m5 exept M[1,2]
// M[3]에 할당 // 3
// n4에서 간다고 선택했을 때 -> M[4]가 될 수 있는 것은 m1 ~ m5 exept M[1,2,3]
// M[4]에 할당 // 4
// n5에서 간다고 선택했을 때 -> M[5]가 될 수 있는 것은 m1 ~ m5 exept M[1,2,3,4]
// M[5]에 할당 // 5 또는 6 -> 2 return

// 
// 
// 1,1,2,3,5,8,13,21,34